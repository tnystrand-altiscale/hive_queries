###################################################################
LOG DUMP FOR: job_wait_reasons_sec_granularity.sql
###################################################################
===================================================================

===================================================================
use thomas_test;
    
drop table if exists job_wait_reasons_sec_granularity;

create table
    job_wait_reasons_sec_granularity
stored as
    ORC
as select
    job_id,
    system,
    min(measure_date) as measure_date,

    sum(memory) as memory_waiting,
    sum(vcores) as vcores_waiting,
        
    --sum(cts.DBG_sec_memory) as DBG_MBmin_over_thres,
    
    max(container_wait_time) as max_container_wait_time,
    count(*) as num_waited_containers,
    sum(case when (memory_job > 0.9*memory_max_capacity) then memory else 0 end) as max_mem_capacity_robbed_MBsec,
    sum(case when (vcores_job > 0.9*vcore_max_capacity ) then vcores else 0 end) as max_vcr_capacity_robbed_VCRsec,
    sum(case when (memory_cluster > 0.9*total_cluster_memory and memory_job < memory_capacity) then memory else 0 end)
        as elastic_unfairness_mem_capped_MBsec,
    sum(case when (vcores_cluster > 0.9*total_cluster_vcores and vcores_job < vcore_capacity) then vcores else 0 end)
        as elastic_unfairness_vcore_capped_VCRsec,
    sum(case when (memory_cluster > 0.9*total_cluster_memory
                    and memory_job between memory_capacity and 0.9*total_cluster_memory) then memory else 0 end)
        as competing_job_mem_capped_MBsec,
    sum(case when (vcores_cluster > 0.9*total_cluster_vcores
                    and vcores_job between vcores_capacity and 0.9*total_cluster_vcores) then vcores else 0 end)
        as competing_job_vcore_capped_VCRsec
        
from
    thomas_test.container_time_series_extended_sec as cts
group by
    job_id,
    system
-------------------------------------------------------------------
Starting query at: Mon Aug 24 18:30:27 UTC 2015
-------------------------------------------------------------------


Logging initialized using configuration in file:/etc/hive-0.13.1/hive-log4j.properties
Hive history file=/home/hive/log/tnystrand/hive_job_log_a13675c6-b98f-40dd-9df4-61aa32f07bf6_2093124120.txt
OK
Time taken: 0.59 seconds
OK
Time taken: 0.487 seconds
WARNING: Comparing a bigint and a double may result in a loss of precision.
FAILED: SemanticException [Error 10004]: Line 29:43 Invalid table alias or column reference 'vcores_capacity': (possible column names are: job_id, system, measure_date, minute_start, queue, container_wait_time, memory, container_id, vcores, memory_job, memory_cluster, memory_capacity, memory_max_capacity, total_cluster_memory, vcores_job, vcores_cluster, vcore_capacity, vcore_max_capacity, total_cluster_vcores)

===================================================================
use thomas_test;
    
drop table if exists job_wait_reasons_sec_granularity;

create table
    job_wait_reasons_sec_granularity
stored as
    ORC
as select
    job_id,
    system,
    min(measure_date) as measure_date,

    sum(memory) as memory_waiting,
    sum(vcores) as vcores_waiting,
        
    --sum(cts.DBG_sec_memory) as DBG_MBmin_over_thres,
    
    max(container_wait_time) as max_container_wait_time,
    count(*) as num_waited_containers,
    sum(case when (memory_job > 0.9*memory_max_capacity) then memory else 0 end) as max_mem_capacity_robbed_MBsec,
    sum(case when (vcores_job > 0.9*vcore_max_capacity ) then vcores else 0 end) as max_vcr_capacity_robbed_VCRsec,
    sum(case when (memory_cluster > 0.9*total_cluster_memory and memory_job < memory_capacity) then memory else 0 end)
        as elastic_unfairness_mem_capped_MBsec,
    sum(case when (vcores_cluster > 0.9*total_cluster_vcores and vcores_job < vcore_capacity) then vcores else 0 end)
        as elastic_unfairness_vcore_capped_VCRsec,
    sum(case when (memory_cluster > 0.9*total_cluster_memory
                    and memory_job between memory_capacity and 0.9*total_cluster_memory) then memory else 0 end)
        as competing_job_mem_capped_MBsec,
    sum(case when (vcores_cluster > 0.9*total_cluster_vcores
                    and vcores_job between vcore_capacity and 0.9*total_cluster_vcores) then vcores else 0 end)
        as competing_job_vcore_capped_VCRsec
        
from
    thomas_test.container_time_series_extended_sec as cts
group by
    job_id,
    system
-------------------------------------------------------------------
Starting query at: Mon Aug 24 18:31:28 UTC 2015
-------------------------------------------------------------------


Logging initialized using configuration in file:/etc/hive-0.13.1/hive-log4j.properties
Hive history file=/home/hive/log/tnystrand/hive_job_log_e1c90309-8a6c-462c-87bc-d8926ce9668d_1390082319.txt
OK
Time taken: 0.531 seconds
OK
Time taken: 0.142 seconds
WARNING: Comparing a bigint and a double may result in a loss of precision.
Total jobs = 1
Launching Job 1 out of 1


Status: Running (application id: application_1440091118973_21819)

Map 1: -/-	Reducer 2: 0/1	
Map 1: 0/7	Reducer 2: 0/1	
Map 1: 0/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 2/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 3/7	Reducer 2: 0/1	
Map 1: 4/7	Reducer 2: 0/1	
Map 1: 4/7	Reducer 2: 0/1	
Map 1: 5/7	Reducer 2: 0/1	
Map 1: 5/7	Reducer 2: 0/1	
